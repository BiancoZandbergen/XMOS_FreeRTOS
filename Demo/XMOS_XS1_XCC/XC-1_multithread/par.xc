/******************************************************************************
 * File:     main.c                                                           *
 * Author:   Bianco Zandbergen  (bianco [at] zandbergen [dot] name)           *
 * Changes:  18 feb 2010, initial release                                     *
 *                                                                            *
 * Demo that demonstrates the use of FreeRTOS in a single hardware thread     *
 * together with multiple other hardware threads on the same and other cores. *
 * The FreeRTOS system runs the same demo as in the simple directory.         *
 *                                                                            *
 * FreeRTOS runs on core 0 (cannot run on other cores.)                       *
 * Three LED controller functions run on core 0 whereby the timing for the    *
 * blinking is generated by three timing threads running on core 1, 2, 3.     *
 *                                                                            *
 * Note: This demo runs only correctly on the XC-1 (not XC-1A!) board.        *
 *                                                                            *
 ******************************************************************************/
#include <platform.h>
#include <xs1.h>

#define DELAY_500MS  50000000
#define DELAY_250MS  25000000
#define DELAY_125MS  12500000

/* port declarations for the clock LED's connected to core 0 */
on stdcore[0] : out port clock_led1   = XS1_PORT_4A;
on stdcore[0] : out port clock_led2   = XS1_PORT_4B;
on stdcore[0] : out port clock_led3   = XS1_PORT_4C;
on stdcore[0] : out port select_green = XS1_PORT_1E;

/* the renamed main() function of FreeRTOS */
int start_FreeRTOS(void);

/* receive the LED state from the channel and set the LED state */
void led_controller(out port p, chanend c)
{
	unsigned long data;
	
	while(1) {
		c :> data;

		if (data == 0) {
			p <: 0x00;
		} else {
			p <: 0x0F;
		}
	}
}

/* send the LED state on timed intervals through the channel */
void timing_generator(unsigned long delay, chanend c)
{
	timer t;
	unsigned long time;

	t :> time;

	while (1) {

		t when timerafter(time) :> void;
		c <: 1;
		time += delay;

		t when timerafter(time) :> void;
		c <: 0;
		time += delay;
	
	}
}

int main(void)
{

	/* channels for communication between timing generators and led controllers */	
	chan c1, c2, c3;

	/* start these statements as concurrent hardware threads, among them the FreeRTOS OS */
	par {
		/* tasks on core 0 */
		on stdcore[0] : start_FreeRTOS();
		on stdcore[0] : select_green <: 1; /* enable the green clock leds */
		on stdcore[0] : led_controller(clock_led1, c1);
		on stdcore[0] : led_controller(clock_led2, c2);
		on stdcore[0] : led_controller(clock_led3, c3);

		/* tasks on core 1, 2, 3 */
		on stdcore[1] : timing_generator(DELAY_500MS, c1);
		on stdcore[2] : timing_generator(DELAY_250MS, c2);
		on stdcore[3] : timing_generator(DELAY_125MS, c3);
	}

	return 0;
}
